设计准则：
    准则一：小既是美
    准则二：让每个程序只做好一件事
    准则三：快速建立原型
    准则四：舍弃高效率而取可移植性--- 摩尔定律
    准则五：采用纯文本来存储数据
    准则六：充分利用软件的杠杆效应（软件复用）
    准则七：避免强制性的用户界面
    准则八：让每个程序都成为过滤器
    其他：沉默是金/各部分之和大于整体/寻求90%的解决方案
设计原则：
    单一职责原则（类的封装）index
        一个程序只做好一件事。
        如果功能过于的复杂就拆分开，每个部分保持独立。
    开放封闭原则（多态可以解决）index01
        对扩展开发，对修改封闭。
        增加需求时，扩展新代码，而非修改已有代码。
    李氏置换原则 (继承)
        引用基类（父类）的地方必须能透明地使用其子类的对象
        子类可以扩展父类功能，但不能改变父类原有功能
        JS使用较少（弱类型语言，以及继承使用少）
    接口独立原则 (接口)
        接口保持单一对立，避免出现“胖接口”，建立单一的接口，同时接口中的方法要尽量的少。 ----- 使用的接口 你必须要实现100方法
         JS没有接口（TS例外），使用较少。
        类似单一职责原则（业务逻辑），这里更加关注接口（方法数量）。
    依赖倒置原则
        面向接口编程，依赖于抽象而不依赖于具体
        高层模块不应该依赖低层模块，二者都应该依赖其抽象，抽象不应该依赖细节；细节应该依赖抽象
        JS中使用较少（没有接口、弱类型）
