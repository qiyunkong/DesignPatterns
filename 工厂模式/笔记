
工厂模式
    工厂模式是用来创建对象的一种最常用的设计模式（创建型）。我们不暴露创建对象的具体逻辑，而是将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂。
    工厂模式根据抽象程度的不同可以分为：简单工厂，工厂方法和抽象工厂。

工厂模式 – 简单工厂 (index)
    简单工厂模式又称静态工厂方法模式。可以根据不同的参数返回不同类的实例。
    简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的类通常具有共同的父类。
    1.工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品
    2.抽象产品角色：它一般是具体产品继承的父类或者实现的接口。
    3.具体产品角色：工厂类所创建的对象就是此角色的实例。

工厂模式 – 工厂方法
    工厂方法模式去掉了简单工厂模式中工厂方法的静态属性，使得它可以被子类继承。
    这样在简单工厂模式里集中在工厂方法上的压力可以由工厂方法模式里不同的工厂子类来分担。
    1.抽象工厂角色：这是工厂方法模式的核心。是具体工厂角色必须实现的接口或者必须继承的父类。
    2.具体工厂角色：含有和具体业务逻辑有关的代码。创建对应的具体产品的对象。
    3.抽象产品角色：它是具体产品继承的父类或者是实现的接口。
    4.具体产品角色：具体工厂角色所创建的对象就是此角色的实例。

工厂模式 – 抽象工厂
    抽象工厂模式是工厂方法模式的泛化版，工厂方法模式是一种特殊的工厂模式。
    在工厂方法模式中一个具体工厂只能生产一种产品而抽象工厂模式一个具体工厂可以生产多个产品。
    1.抽象工厂角色：这是工厂方法模式的核心。是具体工厂角色必须实现的接口或者必须继承的父类。
    2.具体工厂角色：含有和具体业务逻辑有关的代码。创建对应的具体产品的对象。
    3.抽象产品角色：它是具体产品继承的父类或者是实现的接口。
    4.具体产品角色：具体工厂角色所创建的对象就是此角色的实例。



    抽象工厂和抽象方法有什么区别：
        1.工厂方法只能添加具体的产品
        2.抽象工厂可以添加不同的产品


